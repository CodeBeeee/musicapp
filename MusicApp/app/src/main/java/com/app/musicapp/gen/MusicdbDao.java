package com.app.musicapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.musicapp.db.Musicdb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSICDB".
*/
public class MusicdbDao extends AbstractDao<Musicdb, Long> {

    public static final String TABLENAME = "MUSICDB";

    /**
     * Properties of entity Musicdb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Songid = new Property(1, Long.class, "songid", false, "SONGID");
        public final static Property Pic_small = new Property(2, String.class, "pic_small", false, "PIC_SMALL");
        public final static Property Songname = new Property(3, String.class, "songname", false, "SONGNAME");
        public final static Property Songauthor = new Property(4, String.class, "songauthor", false, "SONGAUTHOR");
        public final static Property Gedanid = new Property(5, Long.class, "gedanid", false, "GEDANID");
    }


    public MusicdbDao(DaoConfig config) {
        super(config);
    }
    
    public MusicdbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSICDB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SONGID\" INTEGER," + // 1: songid
                "\"PIC_SMALL\" TEXT," + // 2: pic_small
                "\"SONGNAME\" TEXT," + // 3: songname
                "\"SONGAUTHOR\" TEXT," + // 4: songauthor
                "\"GEDANID\" INTEGER);"); // 5: gedanid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSICDB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Musicdb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long songid = entity.getSongid();
        if (songid != null) {
            stmt.bindLong(2, songid);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(3, pic_small);
        }
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(4, songname);
        }
 
        String songauthor = entity.getSongauthor();
        if (songauthor != null) {
            stmt.bindString(5, songauthor);
        }
 
        Long gedanid = entity.getGedanid();
        if (gedanid != null) {
            stmt.bindLong(6, gedanid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Musicdb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long songid = entity.getSongid();
        if (songid != null) {
            stmt.bindLong(2, songid);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(3, pic_small);
        }
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(4, songname);
        }
 
        String songauthor = entity.getSongauthor();
        if (songauthor != null) {
            stmt.bindString(5, songauthor);
        }
 
        Long gedanid = entity.getGedanid();
        if (gedanid != null) {
            stmt.bindLong(6, gedanid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Musicdb readEntity(Cursor cursor, int offset) {
        Musicdb entity = new Musicdb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // songid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pic_small
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // songname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // songauthor
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // gedanid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Musicdb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPic_small(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSongname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSongauthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGedanid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Musicdb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Musicdb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Musicdb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

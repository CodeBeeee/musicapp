package com.app.musicapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.musicapp.db.Gedandb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GEDANDB".
*/
public class GedandbDao extends AbstractDao<Gedandb, Long> {

    public static final String TABLENAME = "GEDANDB";

    /**
     * Properties of entity Gedandb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gedanid = new Property(0, Long.class, "gedanid", true, "_id");
        public final static Property Gedanname = new Property(1, String.class, "gedanname", false, "GEDANNAME");
        public final static Property Gedanhasnum = new Property(2, int.class, "gedanhasnum", false, "GEDANHASNUM");
    }


    public GedandbDao(DaoConfig config) {
        super(config);
    }
    
    public GedandbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GEDANDB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gedanid
                "\"GEDANNAME\" TEXT," + // 1: gedanname
                "\"GEDANHASNUM\" INTEGER NOT NULL );"); // 2: gedanhasnum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GEDANDB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gedandb entity) {
        stmt.clearBindings();
 
        Long gedanid = entity.getGedanid();
        if (gedanid != null) {
            stmt.bindLong(1, gedanid);
        }
 
        String gedanname = entity.getGedanname();
        if (gedanname != null) {
            stmt.bindString(2, gedanname);
        }
        stmt.bindLong(3, entity.getGedanhasnum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gedandb entity) {
        stmt.clearBindings();
 
        Long gedanid = entity.getGedanid();
        if (gedanid != null) {
            stmt.bindLong(1, gedanid);
        }
 
        String gedanname = entity.getGedanname();
        if (gedanname != null) {
            stmt.bindString(2, gedanname);
        }
        stmt.bindLong(3, entity.getGedanhasnum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Gedandb readEntity(Cursor cursor, int offset) {
        Gedandb entity = new Gedandb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gedanid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gedanname
            cursor.getInt(offset + 2) // gedanhasnum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gedandb entity, int offset) {
        entity.setGedanid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGedanname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGedanhasnum(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gedandb entity, long rowId) {
        entity.setGedanid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gedandb entity) {
        if(entity != null) {
            return entity.getGedanid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gedandb entity) {
        return entity.getGedanid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.app.musicapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.musicapp.db.PlayMusic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_MUSIC".
*/
public class PlayMusicDao extends AbstractDao<PlayMusic, Void> {

    public static final String TABLENAME = "PLAY_MUSIC";

    /**
     * Properties of entity PlayMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Songid = new Property(0, Long.class, "songid", false, "SONGID");
        public final static Property Songname = new Property(1, String.class, "songname", false, "SONGNAME");
        public final static Property Songimg = new Property(2, String.class, "songimg", false, "SONGIMG");
        public final static Property Songauthor = new Property(3, String.class, "songauthor", false, "SONGAUTHOR");
    }


    public PlayMusicDao(DaoConfig config) {
        super(config);
    }
    
    public PlayMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_MUSIC\" (" + //
                "\"SONGID\" INTEGER," + // 0: songid
                "\"SONGNAME\" TEXT," + // 1: songname
                "\"SONGIMG\" TEXT," + // 2: songimg
                "\"SONGAUTHOR\" TEXT);"); // 3: songauthor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayMusic entity) {
        stmt.clearBindings();
 
        Long songid = entity.getSongid();
        if (songid != null) {
            stmt.bindLong(1, songid);
        }
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(2, songname);
        }
 
        String songimg = entity.getSongimg();
        if (songimg != null) {
            stmt.bindString(3, songimg);
        }
 
        String songauthor = entity.getSongauthor();
        if (songauthor != null) {
            stmt.bindString(4, songauthor);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayMusic entity) {
        stmt.clearBindings();
 
        Long songid = entity.getSongid();
        if (songid != null) {
            stmt.bindLong(1, songid);
        }
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(2, songname);
        }
 
        String songimg = entity.getSongimg();
        if (songimg != null) {
            stmt.bindString(3, songimg);
        }
 
        String songauthor = entity.getSongauthor();
        if (songauthor != null) {
            stmt.bindString(4, songauthor);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PlayMusic readEntity(Cursor cursor, int offset) {
        PlayMusic entity = new PlayMusic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // songid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // songimg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // songauthor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayMusic entity, int offset) {
        entity.setSongid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongimg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSongauthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PlayMusic entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PlayMusic entity) {
        return null;
    }

    @Override
    public boolean hasKey(PlayMusic entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
